import json


class MediatorEvent():
    def __init__(self, type: str, val: str, intervalMs=0) -> None:
        self.mType = type
        self.mValue = val
        self.mIntervalMs = intervalMs

    def type(self):
        return self.mType

    def value(self):
        return self.mValue

    def intervalMs(self):
        return self.mIntervalMs

    mType = str
    mValue = str
    mIntervalMs = int


class Mediator():
    def notify(self, sender: object, event: MediatorEvent) -> None:
        pass


class ConcreteMediator(Mediator):
    def __init__(self, component1: object, component2: object, component3: object) -> None:
        if not component1 == None:
            self._handler = component1
            self._handler.mediator = self
        if not component1 == None:
            self._reader = component2
            self._reader.mediator = self
        if not component1 == None:
            self._jproc = component3
            self._jproc.mediator = self

    def notify(self, sender: object, event: MediatorEvent) -> None:
        # print(event)
        data = self._reader.getData()
        self._reader.clearDataInInterval(event.intervalMs())

        if event.type() == 'search_global':
            if len(data) > 0:
                # list records by last element
                metricsArray = self._jproc.listDataRecords(data[-1])
                sender.sendSearchResponce(metricsArray)
            else:
                print("Json reader has no read data!")

        if event.type() == 'search_target':
            print("")
            # todo

        if event.type() == 'query_targets':
            responceData = self._jproc.getTagetData(data, event.value())
            # responceData = json.loads(r'[{"target": "s1ap_sniffer_pkt_cnt", "datapoints": [[861.0, 1450754160], [767.0, 1450754220], [809.0, 1450754280], [907.0, 1450754340], [624.0, 1450754400], [2445.0, 1450754460], [3134.0, 1450754520], [611.0, 1450754580], [505.0, 1450754640], [646.0, 1450754700], [1441.0, 1450754760], [1246.0, 1450754820], [666.0, 1450754880], [813.0, 1450754940], [1654.0, 1450755000], [785.0, 1450755060], [309.0, 1450755120], [1570.0, 1450755180], [1042.0, 1450755240], [1574.0, 1450755300], [1001.0, 1450755360], [729.0, 1450755420], [2447.0, 1450755480], [1596.0, 1450755540], [883.0, 1450755600], [731.0, 1450755660], [1173.0, 1450755720], [1255.0, 1450755780], [716.0, 1450755840], [635.0, 1450755900], [931.0, 1450755960], [558.0, 1450756020], [1614.0, 1450756080], [1881.0, 1450756140], [435.0, 1450756200], [1798.0, 1450756260], [1493.0, 1450756320], [2108.0, 1450756380], [297.0, 1450756440], [702.0, 1450756500], [1216.0, 1450756560], [1666.0, 1450756620], [536.0, 1450756680], [893.0, 1450756740], [916.0, 1450756800], [473.0, 1450756860], [1555.0, 1450756920], [331.0, 1450756980], [1644.0, 1450757040], [556.0, 1450757100], [358.0, 1450757160], [821.0, 1450757220], [1325.0, 1450757280], [1052.0, 1450757340], [974.0, 1450757400], [816.0, 1450757460], [1062.0, 1450757520], [1438.0, 1450757580], [3759.0, 1450757640], [1479.0, 1450757700], [2117.0, 1450757760], [2878.0, 1450757820], [3627.0, 1450757880], [2101.0, 1450757940], [931.0, 1450758000], [1593.0, 1450758060], [487.0, 1450758120], [2282.0, 1450758180], [983.0, 1450758240], [4287.0, 1450758300], [1422.0, 1450758360], [1604.0, 1450758420], [1099.0, 1450758480], [1128.0, 1450758540], [1547.0, 1450758600], [1932.0, 1450758660], [595.0, 1450758720], [708.0, 1450758780], [1481.0, 1450758840], [1107.0, 1450758900], [875.0, 1450758960], [1128.0, 1450759020], [618.0, 1450759080], [1809.0, 1450759140], [2170.0, 1450759200], [831.0, 1450759260], [1898.0, 1450759320], [1556.0, 1450759380], [1388.0, 1450759440], [1864.0, 1450759500], [1220.0, 1450759560], [1351.0, 1450759620], [1612.0, 1450759680], [1089.0, 1450759740], [1364.0, 1450759800], [1397.0, 1450759860], [1194.0, 1450759920], [892.0, 1450759980], [1275.0, 1450760040], [1110.0, 1450760100], [2732.0, 1450760160], [1751.0, 1450760220], [2395.0, 1450760280], [1750.0, 1450760340], [1821.0, 1450760400], [1353.0, 1450760460], [1088.0, 1450760520], [938.0, 1450760580], [1699.0, 1450760640], [1497.0, 1450760700], [1880.0, 1450760760], [599.0, 1450760820], [2319.0, 1450760880], [1114.0, 1450760940], [840.0, 1450761000], [2462.0, 1450761060], [1316.0, 1450761120], [1018.0, 1450761180], [1195.0, 1450761240], [1300.0, 1450761300], [1389.0, 1450761360], [908.0, 1450761420], [2060.0, 1450761480], [1535.0, 1450761540], [1535.0, 1450761600], [2505.0, 1450761660], [920.0, 1450761720], [996.0, 1450761780], [1378.0, 1450761840], [1171.0, 1450761900], [1105.0, 1450761960], [848.0, 1450762020], [798.0, 1450762080], [1338.0, 1450762140], [1307.0, 1450762200], [1317.0, 1450762260], [940.0, 1450762320], [1418.0, 1450762380], [1699.0, 1450762440], [859.0, 1450762500], [1038.0, 1450762560], [1760.0, 1450762620], [676.0, 1450762680], [1501.0, 1450762740], [1521.0, 1450762800], [714.0, 1450762860], [964.0, 1450762920], [1286.0, 1450762980], [609.0, 1450763040], [1363.0, 1450763100], [1610.0, 1450763160], [1097.0, 1450763220], [1571.0, 1450763280], [949.0, 1450763340], [1239.0, 1450763400], [998.0, 1450763460], [808.0, 1450763520], [1158.0, 1450763580], [1683.0, 1450763640], [1195.0, 1450763700], [733.0, 1450763760], [1498.0, 1450763820], [1015.0, 1450763880], [956.0, 1450763940], [2610.0, 1450764000], [1335.0, 1450764060], [2282.0, 1450764120], [1840.0, 1450764180], [1540.0, 1450764240], [1371.0, 1450764300], [1553.0, 1450764360], [1722.0, 1450764420], [1031.0, 1450764480], [1850.0, 1450764540], [1590.0, 1450764600], [1264.0, 1450764660], [1828.0, 1450764720], [2048.0, 1450764780], [1460.0, 1450764840], [1498.0, 1450764900], [1671.0, 1450764960], [1516.0, 1450765020], [2505.0, 1450765080], [1489.0, 1450765140], [1141.0, 1450765200], [1756.0, 1450765260], [1161.0, 1450765320], [1687.0, 1450765380], [1227.0, 1450765440], [1979.0, 1450765500], [1457.0, 1450765560], [1400.0, 1450765620], [1267.0, 1450765680], [1560.0, 1450765740], [1843.0, 1450765800], [1565.0, 1450765860], [1266.0, 1450765920], [1063.0, 1450765980], [1464.0, 1450766040], [1333.0, 1450766100], [1004.0, 1450766160], [1358.0, 1450766220], [1234.0, 1450766280], [1744.0, 1450766340], [1640.0, 1450766400]]}]')
            # print("Responce: ", responceData)
            sender.sendQueryResponce(json.loads(responceData))


class BaseComponent:
    def __init__(self, mediator: Mediator = None) -> None:
        self._mediator = mediator

    @property
    def mediator(self) -> Mediator:
        return self._mediator

    @mediator.setter
    def mediator(self, mediator: Mediator) -> None:
        self._mediator = mediator
